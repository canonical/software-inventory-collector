import datetime
import json
import tarfile
from pathlib import Path
from subprocess import CalledProcessError, check_call

import pytest
from pytest_httpserver import HTTPServer

from tests.functional.conftest import CUSTOMER, MODEL, SITE

TIMESTAMP = datetime.datetime.now().strftime("%Y%m%d%H%M")


def test_collector(httpserver: HTTPServer, http_server_response):
    """Test that the snap generate the expected tar files."""
    for endpoint, content in http_server_response.items():
        httpserver.expect_request(f"/{endpoint}").respond_with_json(content)

    check_call(["software-inventory-collector"])
    tar_files = Path("/tmp/").glob("*.tar")
    collector_files = [file for file in tar_files if TIMESTAMP in file.name]
    assert all(CUSTOMER in file.name and SITE in file.name for file in collector_files)

    # check the content generated by the endpoints
    for file in collector_files:
        if MODEL in file.name:
            tar = tarfile.open(str(file))
            for member in tar.getmembers():
                f = tar.extractfile(member)
                content = json.loads(f.read().decode("ascii"))
                endpoint = member.name.split("_")[0]
                assert content == http_server_response[endpoint]
            tar.close()


def test_collector_error():
    """Test that the snap fails if doesn't fetch information from a server."""
    with pytest.raises(CalledProcessError):
        check_call(["software-inventory-collector"])
